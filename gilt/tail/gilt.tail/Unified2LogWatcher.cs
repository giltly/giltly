using System;
using System.IO;
using gilt.util;

namespace gilt.tail
{
    /// <summary>
    /// Watches the filesystem for changes made to the unified2 log files generated by snort
    /// </summary>
    public class Unified2LogWatcher
    {
        /// <summary>
        /// Thread Safe Event Log File Event
        /// </summary>
        public event EventHandler LogFileEvent;
        /// <summary>
        /// Delegate a change event in the snort unified to file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public delegate void EventHandler(object sender, FileSystemEventArgs args);
        /// <summary>
        /// The instance of the filesystem watcher that will throw events to unified 2 consumers
        /// </summary>
        private FileSystemWatcher _fileWatcher = null;        

        /// <summary>
        /// Create a new unfiied 2 log file watcher using the setting from app.config
        /// </summary>
        public Unified2LogWatcher()
        {            
            _fileWatcher = new FileSystemWatcher(AppSettings.SnortLogFolder, AppSettings.SnortLogPrefixName + "*");
            _fileWatcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName;
            _fileWatcher.Created += _fileWatcher_Created;
            _fileWatcher.Changed += _fileWatcher_Changed;
            _fileWatcher.Renamed += _fileWatcher_Renamed;
            _fileWatcher.Deleted += _fileWatcher_Deleted;
        }

        /// <summary>
        /// Start watching for log file events        
        /// </summary>
        public void StartWatching()
        {
            //start watching the directory for changes
            _fileWatcher.EnableRaisingEvents = true;

            DirectoryInfo di = new DirectoryInfo(AppSettings.SnortLogFolder);
            foreach (FileInfo fi in di.GetFiles(AppSettings.SnortLogPrefixName + "*"))
            {
                this.OnLogFileEvent(new FileSystemEventArgs(WatcherChangeTypes.All, fi.DirectoryName, fi.Name));
            }
        }

        private void OnLogFileEvent(FileSystemEventArgs args)
        {
            //multi-cast (var) delegates are immutable
            var target = LogFileEvent;
            if (null != target)
            {
                target(this, args);
            }
        }
        private void _fileWatcher_Deleted(object sender, FileSystemEventArgs e)
        {
            this.OnLogFileEvent(e);
        }
        private void _fileWatcher_Renamed(object sender, RenamedEventArgs e)
        {
            //the snort log file should not be renamed while snort is running...
            throw new NotImplementedException();
        }
        private void _fileWatcher_Changed(object sender, FileSystemEventArgs e)
        {
            this.OnLogFileEvent(e);
        }
        private void _fileWatcher_Created(object sender, FileSystemEventArgs e)
        {
            this.OnLogFileEvent(e);
        }
    }
}
