#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gilt.dblinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="giltdb")]
	public partial class giltdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertData(Data instance);
    partial void UpdateData(Data instance);
    partial void DeleteData(Data instance);
    partial void InsertEncoding(Encoding instance);
    partial void UpdateEncoding(Encoding instance);
    partial void DeleteEncoding(Encoding instance);
    partial void InsertDetail(Detail instance);
    partial void UpdateDetail(Detail instance);
    partial void DeleteDetail(Detail instance);
    partial void InsertFlag(Flag instance);
    partial void UpdateFlag(Flag instance);
    partial void DeleteFlag(Flag instance);
    partial void InsertUDPHeader(UDPHeader instance);
    partial void UpdateUDPHeader(UDPHeader instance);
    partial void DeleteUDPHeader(UDPHeader instance);
    partial void InsertGeoIp(GeoIp instance);
    partial void UpdateGeoIp(GeoIp instance);
    partial void DeleteGeoIp(GeoIp instance);
    partial void InsertICMPHeader(ICMPHeader instance);
    partial void UpdateICMPHeader(ICMPHeader instance);
    partial void DeleteICMPHeader(ICMPHeader instance);
    partial void InsertIPHeader(IPHeader instance);
    partial void UpdateIPHeader(IPHeader instance);
    partial void DeleteIPHeader(IPHeader instance);
    partial void InsertLogEntry(LogEntry instance);
    partial void UpdateLogEntry(LogEntry instance);
    partial void DeleteLogEntry(LogEntry instance);
    partial void InsertLogHistory(LogHistory instance);
    partial void UpdateLogHistory(LogHistory instance);
    partial void DeleteLogHistory(LogHistory instance);
    partial void InsertProtocolOption(ProtocolOption instance);
    partial void UpdateProtocolOption(ProtocolOption instance);
    partial void DeleteProtocolOption(ProtocolOption instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    partial void InsertReferenceSystem(ReferenceSystem instance);
    partial void UpdateReferenceSystem(ReferenceSystem instance);
    partial void DeleteReferenceSystem(ReferenceSystem instance);
    partial void InsertSchema(Schema instance);
    partial void UpdateSchema(Schema instance);
    partial void DeleteSchema(Schema instance);
    partial void InsertSensor(Sensor instance);
    partial void UpdateSensor(Sensor instance);
    partial void DeleteSensor(Sensor instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertSignature(Signature instance);
    partial void UpdateSignature(Signature instance);
    partial void DeleteSignature(Signature instance);
    partial void InsertSignatureClassification(SignatureClassification instance);
    partial void UpdateSignatureClassification(SignatureClassification instance);
    partial void DeleteSignatureClassification(SignatureClassification instance);
    partial void InsertSignatureReference(SignatureReference instance);
    partial void UpdateSignatureReference(SignatureReference instance);
    partial void DeleteSignatureReference(SignatureReference instance);
    partial void InsertTCPHeader(TCPHeader instance);
    partial void UpdateTCPHeader(TCPHeader instance);
    partial void DeleteTCPHeader(TCPHeader instance);
    partial void InsertGeoLocation(GeoLocation instance);
    partial void UpdateGeoLocation(GeoLocation instance);
    partial void DeleteGeoLocation(GeoLocation instance);
    partial void InsertCountryCode(CountryCode instance);
    partial void UpdateCountryCode(CountryCode instance);
    partial void DeleteCountryCode(CountryCode instance);
    partial void InsertSearch(Search instance);
    partial void UpdateSearch(Search instance);
    partial void DeleteSearch(Search instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertNLog(NLog instance);
    partial void UpdateNLog(NLog instance);
    partial void DeleteNLog(NLog instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertUserUserGroup(UserUserGroup instance);
    partial void UpdateUserUserGroup(UserUserGroup instance);
    partial void DeleteUserUserGroup(UserUserGroup instance);
    partial void InsertEventComment(EventComment instance);
    partial void UpdateEventComment(EventComment instance);
    partial void DeleteEventComment(EventComment instance);
    #endregion
				
		public giltdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public giltdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public giltdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public giltdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Data> Datas
		{
			get
			{
				return this.GetTable<Data>();
			}
		}
		
		public System.Data.Linq.Table<Encoding> Encodings
		{
			get
			{
				return this.GetTable<Encoding>();
			}
		}
		
		public System.Data.Linq.Table<Detail> Details
		{
			get
			{
				return this.GetTable<Detail>();
			}
		}
		
		public System.Data.Linq.Table<Flag> Flags
		{
			get
			{
				return this.GetTable<Flag>();
			}
		}
		
		public System.Data.Linq.Table<UDPHeader> UDPHeaders
		{
			get
			{
				return this.GetTable<UDPHeader>();
			}
		}
		
		public System.Data.Linq.Table<GeoIp> GeoIps
		{
			get
			{
				return this.GetTable<GeoIp>();
			}
		}
		
		public System.Data.Linq.Table<ICMPHeader> ICMPHeaders
		{
			get
			{
				return this.GetTable<ICMPHeader>();
			}
		}
		
		public System.Data.Linq.Table<IPHeader> IPHeaders
		{
			get
			{
				return this.GetTable<IPHeader>();
			}
		}
		
		public System.Data.Linq.Table<LogEntry> LogEntries
		{
			get
			{
				return this.GetTable<LogEntry>();
			}
		}
		
		public System.Data.Linq.Table<LogHistory> LogHistories
		{
			get
			{
				return this.GetTable<LogHistory>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolOption> ProtocolOptions
		{
			get
			{
				return this.GetTable<ProtocolOption>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocols
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceSystem> ReferenceSystems
		{
			get
			{
				return this.GetTable<ReferenceSystem>();
			}
		}
		
		public System.Data.Linq.Table<Schema> Schemas
		{
			get
			{
				return this.GetTable<Schema>();
			}
		}
		
		public System.Data.Linq.Table<Sensor> Sensors
		{
			get
			{
				return this.GetTable<Sensor>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Signature> Signatures
		{
			get
			{
				return this.GetTable<Signature>();
			}
		}
		
		public System.Data.Linq.Table<SignatureClassification> SignatureClassifications
		{
			get
			{
				return this.GetTable<SignatureClassification>();
			}
		}
		
		public System.Data.Linq.Table<SignatureReference> SignatureReferences
		{
			get
			{
				return this.GetTable<SignatureReference>();
			}
		}
		
		public System.Data.Linq.Table<TCPHeader> TCPHeaders
		{
			get
			{
				return this.GetTable<TCPHeader>();
			}
		}
		
		public System.Data.Linq.Table<GeoLocation> GeoLocations
		{
			get
			{
				return this.GetTable<GeoLocation>();
			}
		}
		
		public System.Data.Linq.Table<CountryCode> CountryCodes
		{
			get
			{
				return this.GetTable<CountryCode>();
			}
		}
		
		public System.Data.Linq.Table<EventsByCountry> EventsByCountries
		{
			get
			{
				return this.GetTable<EventsByCountry>();
			}
		}
		
		public System.Data.Linq.Table<EventsByIp> EventsByIps
		{
			get
			{
				return this.GetTable<EventsByIp>();
			}
		}
		
		public System.Data.Linq.Table<Search> Searches
		{
			get
			{
				return this.GetTable<Search>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<NLog> NLogs
		{
			get
			{
				return this.GetTable<NLog>();
			}
		}
		
		public System.Data.Linq.Table<UniqueDestinationPort> UniqueDestinationPorts
		{
			get
			{
				return this.GetTable<UniqueDestinationPort>();
			}
		}
		
		public System.Data.Linq.Table<UniqueSourcePort> UniqueSourcePorts
		{
			get
			{
				return this.GetTable<UniqueSourcePort>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<UserUserGroup> UserUserGroups
		{
			get
			{
				return this.GetTable<UserUserGroup>();
			}
		}
		
		public System.Data.Linq.Table<EventComment> EventComments
		{
			get
			{
				return this.GetTable<EventComment>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.VarBinaryToIpString", IsComposable=true)]
		public string VarBinaryToIpString([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(16)")] System.Data.Linq.Binary param1)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param1).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteEventData")]
		public int DeleteEventData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteGeoData")]
		public int DeleteGeoData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteLogData")]
		public int DeleteLogData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteSnortData")]
		public int DeleteSnortData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _EventId;
		
		private decimal _SensorId;
		
		private decimal _SignatureId;
		
		private System.DateTime _TimeStamp;
		
		private EntitySet<Data> _Datas;
		
		private EntitySet<UDPHeader> _UDPHeaders;
		
		private EntitySet<ICMPHeader> _ICMPHeaders;
		
		private EntitySet<IPHeader> _IPHeaders;
		
		private EntitySet<TCPHeader> _TCPHeaders;
		
		private EntitySet<EventComment> _EventComments;
		
		private EntityRef<Sensor> _Sensor;
		
		private EntityRef<Signature> _Signature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnSignatureIdChanging(decimal value);
    partial void OnSignatureIdChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Event()
		{
			this._Datas = new EntitySet<Data>(new Action<Data>(this.attach_Datas), new Action<Data>(this.detach_Datas));
			this._UDPHeaders = new EntitySet<UDPHeader>(new Action<UDPHeader>(this.attach_UDPHeaders), new Action<UDPHeader>(this.detach_UDPHeaders));
			this._ICMPHeaders = new EntitySet<ICMPHeader>(new Action<ICMPHeader>(this.attach_ICMPHeaders), new Action<ICMPHeader>(this.detach_ICMPHeaders));
			this._IPHeaders = new EntitySet<IPHeader>(new Action<IPHeader>(this.attach_IPHeaders), new Action<IPHeader>(this.detach_IPHeaders));
			this._TCPHeaders = new EntitySet<TCPHeader>(new Action<TCPHeader>(this.attach_TCPHeaders), new Action<TCPHeader>(this.detach_TCPHeaders));
			this._EventComments = new EntitySet<EventComment>(new Action<EventComment>(this.attach_EventComments), new Action<EventComment>(this.detach_EventComments));
			this._Sensor = default(EntityRef<Sensor>);
			this._Signature = default(EntityRef<Signature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SignatureId
		{
			get
			{
				return this._SignatureId;
			}
			set
			{
				if ((this._SignatureId != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureIdChanging(value);
					this.SendPropertyChanging();
					this._SignatureId = value;
					this.SendPropertyChanged("SignatureId");
					this.OnSignatureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Data", Storage="_Datas", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<Data> Datas
		{
			get
			{
				return this._Datas;
			}
			set
			{
				this._Datas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_UDPHeader", Storage="_UDPHeaders", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<UDPHeader> UDPHeaders
		{
			get
			{
				return this._UDPHeaders;
			}
			set
			{
				this._UDPHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ICMPHeader", Storage="_ICMPHeaders", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<ICMPHeader> ICMPHeaders
		{
			get
			{
				return this._ICMPHeaders;
			}
			set
			{
				this._ICMPHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_IPHeader", Storage="_IPHeaders", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<IPHeader> IPHeaders
		{
			get
			{
				return this._IPHeaders;
			}
			set
			{
				this._IPHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_TCPHeader", Storage="_TCPHeaders", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<TCPHeader> TCPHeaders
		{
			get
			{
				return this._TCPHeaders;
			}
			set
			{
				this._TCPHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventComment", Storage="_EventComments", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId")]
		public EntitySet<EventComment> EventComments
		{
			get
			{
				return this._EventComments;
			}
			set
			{
				this._EventComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_Event", Storage="_Sensor", ThisKey="SensorId", OtherKey="Id", IsForeignKey=true)]
		public Sensor Sensor
		{
			get
			{
				return this._Sensor.Entity;
			}
			set
			{
				Sensor previousValue = this._Sensor.Entity;
				if (((previousValue != value) 
							|| (this._Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Sensor.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._SensorId = value.Id;
					}
					else
					{
						this._SensorId = default(decimal);
					}
					this.SendPropertyChanged("Sensor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_Event", Storage="_Signature", ThisKey="SignatureId", OtherKey="Id", IsForeignKey=true)]
		public Signature Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				Signature previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._SignatureId = value.Id;
					}
					else
					{
						this._SignatureId = default(decimal);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Datas(Data entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Datas(Data entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_UDPHeaders(UDPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_UDPHeaders(UDPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_ICMPHeaders(ICMPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_ICMPHeaders(ICMPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_IPHeaders(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_IPHeaders(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_TCPHeaders(TCPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_TCPHeaders(TCPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Data")]
	public partial class Data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _EventId;
		
		private string _Payload;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnPayloadChanging(string value);
    partial void OnPayloadChanged();
    #endregion
		
		public Data()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payload", DbType="VarChar(8000)")]
		public string Payload
		{
			get
			{
				return this._Payload;
			}
			set
			{
				if ((this._Payload != value))
				{
					this.OnPayloadChanging(value);
					this.SendPropertyChanging();
					this._Payload = value;
					this.SendPropertyChanged("Payload");
					this.OnPayloadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Data", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Datas.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Datas.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Encoding")]
	public partial class Encoding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private EntitySet<Sensor> _Sensors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Encoding()
		{
			this._Sensors = new EntitySet<Sensor>(new Action<Sensor>(this.attach_Sensors), new Action<Sensor>(this.detach_Sensors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encoding_Sensor", Storage="_Sensors", ThisKey="Id", OtherKey="EncodingId")]
		public EntitySet<Sensor> Sensors
		{
			get
			{
				return this._Sensors;
			}
			set
			{
				this._Sensors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Encoding = this;
		}
		
		private void detach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Encoding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Detail")]
	public partial class Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private EntitySet<Sensor> _Sensors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Detail()
		{
			this._Sensors = new EntitySet<Sensor>(new Action<Sensor>(this.attach_Sensors), new Action<Sensor>(this.detach_Sensors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Detail_Sensor", Storage="_Sensors", ThisKey="Id", OtherKey="DetailId")]
		public EntitySet<Sensor> Sensors
		{
			get
			{
				return this._Sensors;
			}
			set
			{
				this._Sensors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flags")]
	public partial class Flag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private byte _Number;
		
		private System.Nullable<int> _RES1;
		
		private System.Nullable<int> _RES2;
		
		private System.Nullable<int> _URG;
		
		private System.Nullable<int> _ACK;
		
		private System.Nullable<int> _PSH;
		
		private System.Nullable<int> _RST;
		
		private System.Nullable<int> _SYN;
		
		private System.Nullable<int> _FIN;
		
		private System.Nullable<int> _Valid;
		
		private string _Description;
		
		private EntitySet<TCPHeader> _TCPHeaders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(byte value);
    partial void OnNumberChanged();
    partial void OnRES1Changing(System.Nullable<int> value);
    partial void OnRES1Changed();
    partial void OnRES2Changing(System.Nullable<int> value);
    partial void OnRES2Changed();
    partial void OnURGChanging(System.Nullable<int> value);
    partial void OnURGChanged();
    partial void OnACKChanging(System.Nullable<int> value);
    partial void OnACKChanged();
    partial void OnPSHChanging(System.Nullable<int> value);
    partial void OnPSHChanged();
    partial void OnRSTChanging(System.Nullable<int> value);
    partial void OnRSTChanged();
    partial void OnSYNChanging(System.Nullable<int> value);
    partial void OnSYNChanged();
    partial void OnFINChanging(System.Nullable<int> value);
    partial void OnFINChanged();
    partial void OnValidChanging(System.Nullable<int> value);
    partial void OnValidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Flag()
		{
			this._TCPHeaders = new EntitySet<TCPHeader>(new Action<TCPHeader>(this.attach_TCPHeaders), new Action<TCPHeader>(this.detach_TCPHeaders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RES1", DbType="Int")]
		public System.Nullable<int> RES1
		{
			get
			{
				return this._RES1;
			}
			set
			{
				if ((this._RES1 != value))
				{
					this.OnRES1Changing(value);
					this.SendPropertyChanging();
					this._RES1 = value;
					this.SendPropertyChanged("RES1");
					this.OnRES1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RES2", DbType="Int")]
		public System.Nullable<int> RES2
		{
			get
			{
				return this._RES2;
			}
			set
			{
				if ((this._RES2 != value))
				{
					this.OnRES2Changing(value);
					this.SendPropertyChanging();
					this._RES2 = value;
					this.SendPropertyChanged("RES2");
					this.OnRES2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URG", DbType="Int")]
		public System.Nullable<int> URG
		{
			get
			{
				return this._URG;
			}
			set
			{
				if ((this._URG != value))
				{
					this.OnURGChanging(value);
					this.SendPropertyChanging();
					this._URG = value;
					this.SendPropertyChanged("URG");
					this.OnURGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACK", DbType="Int")]
		public System.Nullable<int> ACK
		{
			get
			{
				return this._ACK;
			}
			set
			{
				if ((this._ACK != value))
				{
					this.OnACKChanging(value);
					this.SendPropertyChanging();
					this._ACK = value;
					this.SendPropertyChanged("ACK");
					this.OnACKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PSH", DbType="Int")]
		public System.Nullable<int> PSH
		{
			get
			{
				return this._PSH;
			}
			set
			{
				if ((this._PSH != value))
				{
					this.OnPSHChanging(value);
					this.SendPropertyChanging();
					this._PSH = value;
					this.SendPropertyChanged("PSH");
					this.OnPSHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RST", DbType="Int")]
		public System.Nullable<int> RST
		{
			get
			{
				return this._RST;
			}
			set
			{
				if ((this._RST != value))
				{
					this.OnRSTChanging(value);
					this.SendPropertyChanging();
					this._RST = value;
					this.SendPropertyChanged("RST");
					this.OnRSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SYN", DbType="Int")]
		public System.Nullable<int> SYN
		{
			get
			{
				return this._SYN;
			}
			set
			{
				if ((this._SYN != value))
				{
					this.OnSYNChanging(value);
					this.SendPropertyChanging();
					this._SYN = value;
					this.SendPropertyChanged("SYN");
					this.OnSYNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIN", DbType="Int")]
		public System.Nullable<int> FIN
		{
			get
			{
				return this._FIN;
			}
			set
			{
				if ((this._FIN != value))
				{
					this.OnFINChanging(value);
					this.SendPropertyChanging();
					this._FIN = value;
					this.SendPropertyChanged("FIN");
					this.OnFINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valid", DbType="Int")]
		public System.Nullable<int> Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flag_TCPHeader", Storage="_TCPHeaders", ThisKey="Number", OtherKey="Flags")]
		public EntitySet<TCPHeader> TCPHeaders
		{
			get
			{
				return this._TCPHeaders;
			}
			set
			{
				this._TCPHeaders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TCPHeaders(TCPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Flag = this;
		}
		
		private void detach_TCPHeaders(TCPHeader entity)
		{
			this.SendPropertyChanging();
			entity.Flag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UDPHeader")]
	public partial class UDPHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _EventId;
		
		private int _SourcePort;
		
		private int _DestinationPort;
		
		private System.Nullable<int> _Length;
		
		private System.Nullable<int> _CheckSum;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnSourcePortChanging(int value);
    partial void OnSourcePortChanged();
    partial void OnDestinationPortChanging(int value);
    partial void OnDestinationPortChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnCheckSumChanging(System.Nullable<int> value);
    partial void OnCheckSumChanged();
    #endregion
		
		public UDPHeader()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePort", DbType="Int NOT NULL")]
		public int SourcePort
		{
			get
			{
				return this._SourcePort;
			}
			set
			{
				if ((this._SourcePort != value))
				{
					this.OnSourcePortChanging(value);
					this.SendPropertyChanging();
					this._SourcePort = value;
					this.SendPropertyChanged("SourcePort");
					this.OnSourcePortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationPort", DbType="Int NOT NULL")]
		public int DestinationPort
		{
			get
			{
				return this._DestinationPort;
			}
			set
			{
				if ((this._DestinationPort != value))
				{
					this.OnDestinationPortChanging(value);
					this.SendPropertyChanging();
					this._DestinationPort = value;
					this.SendPropertyChanged("DestinationPort");
					this.OnDestinationPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckSum", DbType="Int")]
		public System.Nullable<int> CheckSum
		{
			get
			{
				return this._CheckSum;
			}
			set
			{
				if ((this._CheckSum != value))
				{
					this.OnCheckSumChanging(value);
					this.SendPropertyChanging();
					this._CheckSum = value;
					this.SendPropertyChanged("CheckSum");
					this.OnCheckSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_UDPHeader", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.UDPHeaders.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.UDPHeaders.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoIp")]
	public partial class GeoIp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _StartIpNumber;
		
		private System.Data.Linq.Binary _EndIpNumber;
		
		private int _LocationId;
		
		private EntityRef<GeoLocation> _GeoLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartIpNumberChanging(System.Data.Linq.Binary value);
    partial void OnStartIpNumberChanged();
    partial void OnEndIpNumberChanging(System.Data.Linq.Binary value);
    partial void OnEndIpNumberChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    #endregion
		
		public GeoIp()
		{
			this._GeoLocation = default(EntityRef<GeoLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartIpNumber", DbType="VarBinary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary StartIpNumber
		{
			get
			{
				return this._StartIpNumber;
			}
			set
			{
				if ((this._StartIpNumber != value))
				{
					this.OnStartIpNumberChanging(value);
					this.SendPropertyChanging();
					this._StartIpNumber = value;
					this.SendPropertyChanged("StartIpNumber");
					this.OnStartIpNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndIpNumber", DbType="VarBinary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary EndIpNumber
		{
			get
			{
				return this._EndIpNumber;
			}
			set
			{
				if ((this._EndIpNumber != value))
				{
					this.OnEndIpNumberChanging(value);
					this.SendPropertyChanging();
					this._EndIpNumber = value;
					this.SendPropertyChanged("EndIpNumber");
					this.OnEndIpNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._GeoLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_GeoIp", Storage="_GeoLocation", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public GeoLocation GeoLocation
		{
			get
			{
				return this._GeoLocation.Entity;
			}
			set
			{
				GeoLocation previousValue = this._GeoLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeoLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoLocation.Entity = null;
						previousValue.GeoIps.Remove(this);
					}
					this._GeoLocation.Entity = value;
					if ((value != null))
					{
						value.GeoIps.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("GeoLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICMPHeader")]
	public partial class ICMPHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _EventId;
		
		private System.Nullable<byte> _Type;
		
		private System.Nullable<byte> _Code;
		
		private System.Nullable<int> _Checksum;
		
		private System.Nullable<int> _ICMPId;
		
		private System.Nullable<int> _ICMPSequence;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnTypeChanging(System.Nullable<byte> value);
    partial void OnTypeChanged();
    partial void OnCodeChanging(System.Nullable<byte> value);
    partial void OnCodeChanged();
    partial void OnChecksumChanging(System.Nullable<int> value);
    partial void OnChecksumChanged();
    partial void OnICMPIdChanging(System.Nullable<int> value);
    partial void OnICMPIdChanged();
    partial void OnICMPSequenceChanging(System.Nullable<int> value);
    partial void OnICMPSequenceChanged();
    #endregion
		
		public ICMPHeader()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt")]
		public System.Nullable<byte> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="TinyInt")]
		public System.Nullable<byte> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checksum", DbType="Int")]
		public System.Nullable<int> Checksum
		{
			get
			{
				return this._Checksum;
			}
			set
			{
				if ((this._Checksum != value))
				{
					this.OnChecksumChanging(value);
					this.SendPropertyChanging();
					this._Checksum = value;
					this.SendPropertyChanged("Checksum");
					this.OnChecksumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICMPId", DbType="Int")]
		public System.Nullable<int> ICMPId
		{
			get
			{
				return this._ICMPId;
			}
			set
			{
				if ((this._ICMPId != value))
				{
					this.OnICMPIdChanging(value);
					this.SendPropertyChanging();
					this._ICMPId = value;
					this.SendPropertyChanged("ICMPId");
					this.OnICMPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICMPSequence", DbType="Int")]
		public System.Nullable<int> ICMPSequence
		{
			get
			{
				return this._ICMPSequence;
			}
			set
			{
				if ((this._ICMPSequence != value))
				{
					this.OnICMPSequenceChanging(value);
					this.SendPropertyChanging();
					this._ICMPSequence = value;
					this.SendPropertyChanged("ICMPSequence");
					this.OnICMPSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ICMPHeader", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.ICMPHeaders.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.ICMPHeaders.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPHeader")]
	public partial class IPHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _EventId;
		
		private System.Data.Linq.Binary _IPSource;
		
		private System.Data.Linq.Binary _IPDestination;
		
		private System.Nullable<int> _IPSourceLocationId;
		
		private System.Nullable<int> _IPDestinationLocationId;
		
		private System.Nullable<byte> _Version;
		
		private System.Nullable<byte> _HeaderLength;
		
		private System.Nullable<byte> _TOS;
		
		private System.Nullable<int> _Length;
		
		private System.Nullable<int> _Identification;
		
		private System.Nullable<byte> _Flags;
		
		private System.Nullable<int> _Offset;
		
		private System.Nullable<byte> _TTL;
		
		private byte _ProtocolId;
		
		private System.Nullable<int> _CheckSum;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<GeoLocation> _GeoLocation;
		
		private EntityRef<GeoLocation> _GeoLocation1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnIPSourceChanging(System.Data.Linq.Binary value);
    partial void OnIPSourceChanged();
    partial void OnIPDestinationChanging(System.Data.Linq.Binary value);
    partial void OnIPDestinationChanged();
    partial void OnIPSourceLocationIdChanging(System.Nullable<int> value);
    partial void OnIPSourceLocationIdChanged();
    partial void OnIPDestinationLocationIdChanging(System.Nullable<int> value);
    partial void OnIPDestinationLocationIdChanged();
    partial void OnVersionChanging(System.Nullable<byte> value);
    partial void OnVersionChanged();
    partial void OnHeaderLengthChanging(System.Nullable<byte> value);
    partial void OnHeaderLengthChanged();
    partial void OnTOSChanging(System.Nullable<byte> value);
    partial void OnTOSChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnIdentificationChanging(System.Nullable<int> value);
    partial void OnIdentificationChanged();
    partial void OnFlagsChanging(System.Nullable<byte> value);
    partial void OnFlagsChanged();
    partial void OnOffsetChanging(System.Nullable<int> value);
    partial void OnOffsetChanged();
    partial void OnTTLChanging(System.Nullable<byte> value);
    partial void OnTTLChanged();
    partial void OnProtocolIdChanging(byte value);
    partial void OnProtocolIdChanged();
    partial void OnCheckSumChanging(System.Nullable<int> value);
    partial void OnCheckSumChanged();
    #endregion
		
		public IPHeader()
		{
			this._Event = default(EntityRef<Event>);
			this._GeoLocation = default(EntityRef<GeoLocation>);
			this._GeoLocation1 = default(EntityRef<GeoLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPSource", DbType="VarBinary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IPSource
		{
			get
			{
				return this._IPSource;
			}
			set
			{
				if ((this._IPSource != value))
				{
					this.OnIPSourceChanging(value);
					this.SendPropertyChanging();
					this._IPSource = value;
					this.SendPropertyChanged("IPSource");
					this.OnIPSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPDestination", DbType="VarBinary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IPDestination
		{
			get
			{
				return this._IPDestination;
			}
			set
			{
				if ((this._IPDestination != value))
				{
					this.OnIPDestinationChanging(value);
					this.SendPropertyChanging();
					this._IPDestination = value;
					this.SendPropertyChanged("IPDestination");
					this.OnIPDestinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPSourceLocationId", DbType="Int")]
		public System.Nullable<int> IPSourceLocationId
		{
			get
			{
				return this._IPSourceLocationId;
			}
			set
			{
				if ((this._IPSourceLocationId != value))
				{
					if (this._GeoLocation1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPSourceLocationIdChanging(value);
					this.SendPropertyChanging();
					this._IPSourceLocationId = value;
					this.SendPropertyChanged("IPSourceLocationId");
					this.OnIPSourceLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPDestinationLocationId", DbType="Int")]
		public System.Nullable<int> IPDestinationLocationId
		{
			get
			{
				return this._IPDestinationLocationId;
			}
			set
			{
				if ((this._IPDestinationLocationId != value))
				{
					if (this._GeoLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPDestinationLocationIdChanging(value);
					this.SendPropertyChanging();
					this._IPDestinationLocationId = value;
					this.SendPropertyChanged("IPDestinationLocationId");
					this.OnIPDestinationLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="TinyInt")]
		public System.Nullable<byte> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderLength", DbType="TinyInt")]
		public System.Nullable<byte> HeaderLength
		{
			get
			{
				return this._HeaderLength;
			}
			set
			{
				if ((this._HeaderLength != value))
				{
					this.OnHeaderLengthChanging(value);
					this.SendPropertyChanging();
					this._HeaderLength = value;
					this.SendPropertyChanged("HeaderLength");
					this.OnHeaderLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOS", DbType="TinyInt")]
		public System.Nullable<byte> TOS
		{
			get
			{
				return this._TOS;
			}
			set
			{
				if ((this._TOS != value))
				{
					this.OnTOSChanging(value);
					this.SendPropertyChanging();
					this._TOS = value;
					this.SendPropertyChanged("TOS");
					this.OnTOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identification", DbType="Int")]
		public System.Nullable<int> Identification
		{
			get
			{
				return this._Identification;
			}
			set
			{
				if ((this._Identification != value))
				{
					this.OnIdentificationChanging(value);
					this.SendPropertyChanging();
					this._Identification = value;
					this.SendPropertyChanged("Identification");
					this.OnIdentificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="TinyInt")]
		public System.Nullable<byte> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offset", DbType="Int")]
		public System.Nullable<int> Offset
		{
			get
			{
				return this._Offset;
			}
			set
			{
				if ((this._Offset != value))
				{
					this.OnOffsetChanging(value);
					this.SendPropertyChanging();
					this._Offset = value;
					this.SendPropertyChanged("Offset");
					this.OnOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTL", DbType="TinyInt")]
		public System.Nullable<byte> TTL
		{
			get
			{
				return this._TTL;
			}
			set
			{
				if ((this._TTL != value))
				{
					this.OnTTLChanging(value);
					this.SendPropertyChanging();
					this._TTL = value;
					this.SendPropertyChanged("TTL");
					this.OnTTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="TinyInt NOT NULL")]
		public byte ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckSum", DbType="Int")]
		public System.Nullable<int> CheckSum
		{
			get
			{
				return this._CheckSum;
			}
			set
			{
				if ((this._CheckSum != value))
				{
					this.OnCheckSumChanging(value);
					this.SendPropertyChanging();
					this._CheckSum = value;
					this.SendPropertyChanged("CheckSum");
					this.OnCheckSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_IPHeader", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.IPHeaders.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.IPHeaders.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_IPHeader", Storage="_GeoLocation", ThisKey="IPDestinationLocationId", OtherKey="LocationId", IsForeignKey=true)]
		public GeoLocation GeoLocation
		{
			get
			{
				return this._GeoLocation.Entity;
			}
			set
			{
				GeoLocation previousValue = this._GeoLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeoLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoLocation.Entity = null;
						previousValue.IPHeaders.Remove(this);
					}
					this._GeoLocation.Entity = value;
					if ((value != null))
					{
						value.IPHeaders.Add(this);
						this._IPDestinationLocationId = value.LocationId;
					}
					else
					{
						this._IPDestinationLocationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeoLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_IPHeader1", Storage="_GeoLocation1", ThisKey="IPSourceLocationId", OtherKey="LocationId", IsForeignKey=true)]
		public GeoLocation GeoLocation1
		{
			get
			{
				return this._GeoLocation1.Entity;
			}
			set
			{
				GeoLocation previousValue = this._GeoLocation1.Entity;
				if (((previousValue != value) 
							|| (this._GeoLocation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoLocation1.Entity = null;
						previousValue.IPHeaders1.Remove(this);
					}
					this._GeoLocation1.Entity = value;
					if ((value != null))
					{
						value.IPHeaders1.Add(this);
						this._IPSourceLocationId = value.LocationId;
					}
					else
					{
						this._IPSourceLocationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeoLocation1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogEntry")]
	public partial class LogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileName;
		
		private System.DateTime _CreatedOn;
		
		private System.DateTime _ModifiedOn;
		
		private int _SizeBytes;
		
		private System.Nullable<System.DateTime> _StartedOn;
		
		private System.Nullable<System.DateTime> _FinishedOn;
		
		private EntitySet<LogHistory> _LogHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnModifiedOnChanging(System.DateTime value);
    partial void OnModifiedOnChanged();
    partial void OnSizeBytesChanging(int value);
    partial void OnSizeBytesChanged();
    partial void OnStartedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedOnChanged();
    partial void OnFinishedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedOnChanged();
    #endregion
		
		public LogEntry()
		{
			this._LogHistories = new EntitySet<LogHistory>(new Action<LogHistory>(this.attach_LogHistories), new Action<LogHistory>(this.detach_LogHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedOn", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeBytes", DbType="Int NOT NULL")]
		public int SizeBytes
		{
			get
			{
				return this._SizeBytes;
			}
			set
			{
				if ((this._SizeBytes != value))
				{
					this.OnSizeBytesChanging(value);
					this.SendPropertyChanging();
					this._SizeBytes = value;
					this.SendPropertyChanged("SizeBytes");
					this.OnSizeBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartedOn
		{
			get
			{
				return this._StartedOn;
			}
			set
			{
				if ((this._StartedOn != value))
				{
					this.OnStartedOnChanging(value);
					this.SendPropertyChanging();
					this._StartedOn = value;
					this.SendPropertyChanged("StartedOn");
					this.OnStartedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishedOn
		{
			get
			{
				return this._FinishedOn;
			}
			set
			{
				if ((this._FinishedOn != value))
				{
					this.OnFinishedOnChanging(value);
					this.SendPropertyChanging();
					this._FinishedOn = value;
					this.SendPropertyChanged("FinishedOn");
					this.OnFinishedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_LogHistory", Storage="_LogHistories", ThisKey="Id", OtherKey="CurrentLogEntryId")]
		public EntitySet<LogHistory> LogHistories
		{
			get
			{
				return this._LogHistories;
			}
			set
			{
				this._LogHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogHistories(LogHistory entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = this;
		}
		
		private void detach_LogHistories(LogHistory entity)
		{
			this.SendPropertyChanging();
			entity.LogEntry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogHistory")]
	public partial class LogHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CurrentLogEntryId;
		
		private System.Nullable<int> _CurrentOffsetBytes;
		
		private EntityRef<LogEntry> _LogEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCurrentLogEntryIdChanging(System.Nullable<int> value);
    partial void OnCurrentLogEntryIdChanged();
    partial void OnCurrentOffsetBytesChanging(System.Nullable<int> value);
    partial void OnCurrentOffsetBytesChanged();
    #endregion
		
		public LogHistory()
		{
			this._LogEntry = default(EntityRef<LogEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentLogEntryId", DbType="Int")]
		public System.Nullable<int> CurrentLogEntryId
		{
			get
			{
				return this._CurrentLogEntryId;
			}
			set
			{
				if ((this._CurrentLogEntryId != value))
				{
					if (this._LogEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentLogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentLogEntryId = value;
					this.SendPropertyChanged("CurrentLogEntryId");
					this.OnCurrentLogEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOffsetBytes", DbType="Int")]
		public System.Nullable<int> CurrentOffsetBytes
		{
			get
			{
				return this._CurrentOffsetBytes;
			}
			set
			{
				if ((this._CurrentOffsetBytes != value))
				{
					this.OnCurrentOffsetBytesChanging(value);
					this.SendPropertyChanging();
					this._CurrentOffsetBytes = value;
					this.SendPropertyChanged("CurrentOffsetBytes");
					this.OnCurrentOffsetBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogEntry_LogHistory", Storage="_LogEntry", ThisKey="CurrentLogEntryId", OtherKey="Id", IsForeignKey=true)]
		public LogEntry LogEntry
		{
			get
			{
				return this._LogEntry.Entity;
			}
			set
			{
				LogEntry previousValue = this._LogEntry.Entity;
				if (((previousValue != value) 
							|| (this._LogEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogEntry.Entity = null;
						previousValue.LogHistories.Remove(this);
					}
					this._LogEntry.Entity = value;
					if ((value != null))
					{
						value.LogHistories.Add(this);
						this._CurrentLogEntryId = value.Id;
					}
					else
					{
						this._CurrentLogEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LogEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolOptions")]
	public partial class ProtocolOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _ClassificationId;
		
		private decimal _OptionId;
		
		private byte _ProtocolId;
		
		private byte _Code;
		
		private System.Nullable<int> _Length;
		
		private string _Data;
		
		private EntityRef<Protocol> _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnClassificationIdChanging(decimal value);
    partial void OnClassificationIdChanged();
    partial void OnOptionIdChanging(decimal value);
    partial void OnOptionIdChanged();
    partial void OnProtocolIdChanging(byte value);
    partial void OnProtocolIdChanged();
    partial void OnCodeChanging(byte value);
    partial void OnCodeChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public ProtocolOption()
		{
			this._Protocol = default(EntityRef<Protocol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ClassificationId
		{
			get
			{
				return this._ClassificationId;
			}
			set
			{
				if ((this._ClassificationId != value))
				{
					this.OnClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClassificationId = value;
					this.SendPropertyChanged("ClassificationId");
					this.OnClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal OptionId
		{
			get
			{
				return this._OptionId;
			}
			set
			{
				if ((this._OptionId != value))
				{
					this.OnOptionIdChanging(value);
					this.SendPropertyChanging();
					this._OptionId = value;
					this.SendPropertyChanged("OptionId");
					this.OnOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="TinyInt NOT NULL")]
		public byte ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="TinyInt NOT NULL")]
		public byte Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarChar(8000)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_ProtocolOption", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="ProtocolId", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.ProtocolOptions.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.ProtocolOptions.Add(this);
						this._ProtocolId = value.ProtocolId;
					}
					else
					{
						this._ProtocolId = default(byte);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocols")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private byte _ProtocolId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ProtocolOption> _ProtocolOptions;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProtocolIdChanging(byte value);
    partial void OnProtocolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Protocol()
		{
			this._ProtocolOptions = new EntitySet<ProtocolOption>(new Action<ProtocolOption>(this.attach_ProtocolOptions), new Action<ProtocolOption>(this.detach_ProtocolOptions));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="TinyInt NOT NULL")]
		public byte ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_ProtocolOption", Storage="_ProtocolOptions", ThisKey="ProtocolId", OtherKey="ProtocolId")]
		public EntitySet<ProtocolOption> ProtocolOptions
		{
			get
			{
				return this._ProtocolOptions;
			}
			set
			{
				this._ProtocolOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Service", Storage="_Services", ThisKey="ProtocolId", OtherKey="ProtocolId")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProtocolOptions(ProtocolOption entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_ProtocolOptions(ProtocolOption entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private decimal _SystemId;
		
		private string _Tag;
		
		private EntitySet<SignatureReference> _SignatureReferences;
		
		private EntityRef<ReferenceSystem> _ReferenceSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnSystemIdChanging(decimal value);
    partial void OnSystemIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Reference()
		{
			this._SignatureReferences = new EntitySet<SignatureReference>(new Action<SignatureReference>(this.attach_SignatureReferences), new Action<SignatureReference>(this.detach_SignatureReferences));
			this._ReferenceSystem = default(EntityRef<ReferenceSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Decimal(10,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._ReferenceSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_SignatureReference", Storage="_SignatureReferences", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<SignatureReference> SignatureReferences
		{
			get
			{
				return this._SignatureReferences;
			}
			set
			{
				this._SignatureReferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSystem_Reference", Storage="_ReferenceSystem", ThisKey="SystemId", OtherKey="Id", IsForeignKey=true)]
		public ReferenceSystem ReferenceSystem
		{
			get
			{
				return this._ReferenceSystem.Entity;
			}
			set
			{
				ReferenceSystem previousValue = this._ReferenceSystem.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceSystem.Entity = null;
						previousValue.References.Remove(this);
					}
					this._ReferenceSystem.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._SystemId = value.Id;
					}
					else
					{
						this._SystemId = default(decimal);
					}
					this.SendPropertyChanged("ReferenceSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SignatureReferences(SignatureReference entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_SignatureReferences(SignatureReference entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceSystem")]
	public partial class ReferenceSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _Name;
		
		private string _URL;
		
		private EntitySet<Reference> _References;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public ReferenceSystem()
		{
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Decimal(10,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(512)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSystem_Reference", Storage="_References", ThisKey="Id", OtherKey="SystemId")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSystem = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Schema]")]
	public partial class Schema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private System.DateTime _ParseTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnParseTimeChanging(System.DateTime value);
    partial void OnParseTimeChanged();
    #endregion
		
		public Schema()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParseTime", DbType="DateTime NOT NULL")]
		public System.DateTime ParseTime
		{
			get
			{
				return this._ParseTime;
			}
			set
			{
				if ((this._ParseTime != value))
				{
					this.OnParseTimeChanging(value);
					this.SendPropertyChanging();
					this._ParseTime = value;
					this.SendPropertyChanged("ParseTime");
					this.OnParseTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensor")]
	public partial class Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _Hostname;
		
		private string _Interface;
		
		private string _Filter;
		
		private System.Nullable<int> _DetailId;
		
		private System.Nullable<int> _EncodingId;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Detail> _Detail;
		
		private EntityRef<Encoding> _Encoding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnHostnameChanging(string value);
    partial void OnHostnameChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    partial void OnDetailIdChanging(System.Nullable<int> value);
    partial void OnDetailIdChanged();
    partial void OnEncodingIdChanging(System.Nullable<int> value);
    partial void OnEncodingIdChanged();
    #endregion
		
		public Sensor()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Detail = default(EntityRef<Detail>);
			this._Encoding = default(EntityRef<Encoding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Decimal(10,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hostname", DbType="VarChar(100)")]
		public string Hostname
		{
			get
			{
				return this._Hostname;
			}
			set
			{
				if ((this._Hostname != value))
				{
					this.OnHostnameChanging(value);
					this.SendPropertyChanging();
					this._Hostname = value;
					this.SendPropertyChanged("Hostname");
					this.OnHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interface", DbType="VarChar(100)")]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="VarChar(100)")]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", DbType="Int")]
		public System.Nullable<int> DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncodingId", DbType="Int")]
		public System.Nullable<int> EncodingId
		{
			get
			{
				return this._EncodingId;
			}
			set
			{
				if ((this._EncodingId != value))
				{
					if (this._Encoding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEncodingIdChanging(value);
					this.SendPropertyChanging();
					this._EncodingId = value;
					this.SendPropertyChanged("EncodingId");
					this.OnEncodingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_Event", Storage="_Events", ThisKey="Id", OtherKey="SensorId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Detail_Sensor", Storage="_Detail", ThisKey="DetailId", OtherKey="Id", IsForeignKey=true)]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.Sensors.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.Sensors.Add(this);
						this._DetailId = value.Id;
					}
					else
					{
						this._DetailId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encoding_Sensor", Storage="_Encoding", ThisKey="EncodingId", OtherKey="Id", IsForeignKey=true)]
		public Encoding Encoding
		{
			get
			{
				return this._Encoding.Entity;
			}
			set
			{
				Encoding previousValue = this._Encoding.Entity;
				if (((previousValue != value) 
							|| (this._Encoding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Encoding.Entity = null;
						previousValue.Sensors.Remove(this);
					}
					this._Encoding.Entity = value;
					if ((value != null))
					{
						value.Sensors.Add(this);
						this._EncodingId = value.Id;
					}
					else
					{
						this._EncodingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Encoding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Port;
		
		private byte _ProtocolId;
		
		private string _Name;
		
		private string _Description;
		
		private EntityRef<Protocol> _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnProtocolIdChanging(byte value);
    partial void OnProtocolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Service()
		{
			this._Protocol = default(EntityRef<Protocol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="TinyInt NOT NULL")]
		public byte ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Service", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="ProtocolId", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ProtocolId = value.ProtocolId;
					}
					else
					{
						this._ProtocolId = default(byte);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Signature")]
	public partial class Signature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _Name;
		
		private decimal _ClassificationId;
		
		private System.Nullable<decimal> _Priority;
		
		private System.Nullable<decimal> _Revision;
		
		private System.Nullable<decimal> _SignatureIdInternal;
		
		private System.Nullable<decimal> _GeneratorId;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<SignatureReference> _SignatureReferences;
		
		private EntitySet<Search> _Searches;
		
		private EntityRef<SignatureClassification> _SignatureClassification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClassificationIdChanging(decimal value);
    partial void OnClassificationIdChanged();
    partial void OnPriorityChanging(System.Nullable<decimal> value);
    partial void OnPriorityChanged();
    partial void OnRevisionChanging(System.Nullable<decimal> value);
    partial void OnRevisionChanged();
    partial void OnSignatureIdInternalChanging(System.Nullable<decimal> value);
    partial void OnSignatureIdInternalChanged();
    partial void OnGeneratorIdChanging(System.Nullable<decimal> value);
    partial void OnGeneratorIdChanged();
    #endregion
		
		public Signature()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._SignatureReferences = new EntitySet<SignatureReference>(new Action<SignatureReference>(this.attach_SignatureReferences), new Action<SignatureReference>(this.detach_SignatureReferences));
			this._Searches = new EntitySet<Search>(new Action<Search>(this.attach_Searches), new Action<Search>(this.detach_Searches));
			this._SignatureClassification = default(EntityRef<SignatureClassification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Decimal(10,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationId", DbType="Decimal(10,0) NOT NULL")]
		public decimal ClassificationId
		{
			get
			{
				return this._ClassificationId;
			}
			set
			{
				if ((this._ClassificationId != value))
				{
					if (this._SignatureClassification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClassificationId = value;
					this.SendPropertyChanged("ClassificationId");
					this.OnClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revision", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureIdInternal", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> SignatureIdInternal
		{
			get
			{
				return this._SignatureIdInternal;
			}
			set
			{
				if ((this._SignatureIdInternal != value))
				{
					this.OnSignatureIdInternalChanging(value);
					this.SendPropertyChanging();
					this._SignatureIdInternal = value;
					this.SendPropertyChanged("SignatureIdInternal");
					this.OnSignatureIdInternalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratorId", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> GeneratorId
		{
			get
			{
				return this._GeneratorId;
			}
			set
			{
				if ((this._GeneratorId != value))
				{
					this.OnGeneratorIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratorId = value;
					this.SendPropertyChanged("GeneratorId");
					this.OnGeneratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_Event", Storage="_Events", ThisKey="Id", OtherKey="SignatureId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_SignatureReference", Storage="_SignatureReferences", ThisKey="Id", OtherKey="SignatureId")]
		public EntitySet<SignatureReference> SignatureReferences
		{
			get
			{
				return this._SignatureReferences;
			}
			set
			{
				this._SignatureReferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_Search", Storage="_Searches", ThisKey="Id", OtherKey="SignatureId")]
		public EntitySet<Search> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				this._Searches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignatureClassification_Signature", Storage="_SignatureClassification", ThisKey="ClassificationId", OtherKey="ClassificationId", IsForeignKey=true)]
		public SignatureClassification SignatureClassification
		{
			get
			{
				return this._SignatureClassification.Entity;
			}
			set
			{
				SignatureClassification previousValue = this._SignatureClassification.Entity;
				if (((previousValue != value) 
							|| (this._SignatureClassification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignatureClassification.Entity = null;
						previousValue.Signatures.Remove(this);
					}
					this._SignatureClassification.Entity = value;
					if ((value != null))
					{
						value.Signatures.Add(this);
						this._ClassificationId = value.ClassificationId;
					}
					else
					{
						this._ClassificationId = default(decimal);
					}
					this.SendPropertyChanged("SignatureClassification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
		
		private void attach_SignatureReferences(SignatureReference entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_SignatureReferences(SignatureReference entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
		
		private void attach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.Signature = this;
		}
		
		private void detach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.Signature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignatureClassification")]
	public partial class SignatureClassification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _ClassificationId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<byte> _DefaultPriority;
		
		private EntitySet<Signature> _Signatures;
		
		private EntitySet<Search> _Searches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassificationIdChanging(decimal value);
    partial void OnClassificationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDefaultPriorityChanging(System.Nullable<byte> value);
    partial void OnDefaultPriorityChanged();
    #endregion
		
		public SignatureClassification()
		{
			this._Signatures = new EntitySet<Signature>(new Action<Signature>(this.attach_Signatures), new Action<Signature>(this.detach_Signatures));
			this._Searches = new EntitySet<Search>(new Action<Search>(this.attach_Searches), new Action<Search>(this.detach_Searches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ClassificationId
		{
			get
			{
				return this._ClassificationId;
			}
			set
			{
				if ((this._ClassificationId != value))
				{
					this.OnClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._ClassificationId = value;
					this.SendPropertyChanged("ClassificationId");
					this.OnClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPriority", DbType="TinyInt")]
		public System.Nullable<byte> DefaultPriority
		{
			get
			{
				return this._DefaultPriority;
			}
			set
			{
				if ((this._DefaultPriority != value))
				{
					this.OnDefaultPriorityChanging(value);
					this.SendPropertyChanging();
					this._DefaultPriority = value;
					this.SendPropertyChanged("DefaultPriority");
					this.OnDefaultPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignatureClassification_Signature", Storage="_Signatures", ThisKey="ClassificationId", OtherKey="ClassificationId")]
		public EntitySet<Signature> Signatures
		{
			get
			{
				return this._Signatures;
			}
			set
			{
				this._Signatures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignatureClassification_Search", Storage="_Searches", ThisKey="ClassificationId", OtherKey="SignatureClassificationId")]
		public EntitySet<Search> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				this._Searches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Signatures(Signature entity)
		{
			this.SendPropertyChanging();
			entity.SignatureClassification = this;
		}
		
		private void detach_Signatures(Signature entity)
		{
			this.SendPropertyChanging();
			entity.SignatureClassification = null;
		}
		
		private void attach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.SignatureClassification = this;
		}
		
		private void detach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.SignatureClassification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignatureReference")]
	public partial class SignatureReference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _SignatureId;
		
		private decimal _SequenceId;
		
		private decimal _ReferenceId;
		
		private EntityRef<Reference> _Reference;
		
		private EntityRef<Signature> _Signature;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSignatureIdChanging(decimal value);
    partial void OnSignatureIdChanged();
    partial void OnSequenceIdChanging(decimal value);
    partial void OnSequenceIdChanged();
    partial void OnReferenceIdChanging(decimal value);
    partial void OnReferenceIdChanged();
    #endregion
		
		public SignatureReference()
		{
			this._Reference = default(EntityRef<Reference>);
			this._Signature = default(EntityRef<Signature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SignatureId
		{
			get
			{
				return this._SignatureId;
			}
			set
			{
				if ((this._SignatureId != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureIdChanging(value);
					this.SendPropertyChanging();
					this._SignatureId = value;
					this.SendPropertyChanged("SignatureId");
					this.OnSignatureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceId", DbType="Decimal(10,0) NOT NULL", IsPrimaryKey=true)]
		public decimal SequenceId
		{
			get
			{
				return this._SequenceId;
			}
			set
			{
				if ((this._SequenceId != value))
				{
					this.OnSequenceIdChanging(value);
					this.SendPropertyChanging();
					this._SequenceId = value;
					this.SendPropertyChanged("SequenceId");
					this.OnSequenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Decimal(10,0) NOT NULL")]
		public decimal ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_SignatureReference", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.SignatureReferences.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.SignatureReferences.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(decimal);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_SignatureReference", Storage="_Signature", ThisKey="SignatureId", OtherKey="Id", IsForeignKey=true)]
		public Signature Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				Signature previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.SignatureReferences.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.SignatureReferences.Add(this);
						this._SignatureId = value.Id;
					}
					else
					{
						this._SignatureId = default(decimal);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TCPHeader")]
	public partial class TCPHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SensorId;
		
		private decimal _EventId;
		
		private int _SourcePort;
		
		private int _DestinationPort;
		
		private System.Nullable<decimal> _Sequence;
		
		private System.Nullable<decimal> _ACK;
		
		private System.Nullable<byte> _Offset;
		
		private System.Nullable<byte> _Reserved;
		
		private System.Nullable<byte> _Flags;
		
		private System.Nullable<int> _Window;
		
		private System.Nullable<int> _CheckSum;
		
		private System.Nullable<int> _Urgent;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Flag> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnSourcePortChanging(int value);
    partial void OnSourcePortChanged();
    partial void OnDestinationPortChanging(int value);
    partial void OnDestinationPortChanged();
    partial void OnSequenceChanging(System.Nullable<decimal> value);
    partial void OnSequenceChanged();
    partial void OnACKChanging(System.Nullable<decimal> value);
    partial void OnACKChanged();
    partial void OnOffsetChanging(System.Nullable<byte> value);
    partial void OnOffsetChanged();
    partial void OnReservedChanging(System.Nullable<byte> value);
    partial void OnReservedChanged();
    partial void OnFlagsChanging(System.Nullable<byte> value);
    partial void OnFlagsChanged();
    partial void OnWindowChanging(System.Nullable<int> value);
    partial void OnWindowChanged();
    partial void OnCheckSumChanging(System.Nullable<int> value);
    partial void OnCheckSumChanged();
    partial void OnUrgentChanging(System.Nullable<int> value);
    partial void OnUrgentChanged();
    #endregion
		
		public TCPHeader()
		{
			this._Event = default(EntityRef<Event>);
			this._Flag = default(EntityRef<Flag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePort", DbType="Int NOT NULL")]
		public int SourcePort
		{
			get
			{
				return this._SourcePort;
			}
			set
			{
				if ((this._SourcePort != value))
				{
					this.OnSourcePortChanging(value);
					this.SendPropertyChanging();
					this._SourcePort = value;
					this.SendPropertyChanged("SourcePort");
					this.OnSourcePortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationPort", DbType="Int NOT NULL")]
		public int DestinationPort
		{
			get
			{
				return this._DestinationPort;
			}
			set
			{
				if ((this._DestinationPort != value))
				{
					this.OnDestinationPortChanging(value);
					this.SendPropertyChanging();
					this._DestinationPort = value;
					this.SendPropertyChanged("DestinationPort");
					this.OnDestinationPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACK", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> ACK
		{
			get
			{
				return this._ACK;
			}
			set
			{
				if ((this._ACK != value))
				{
					this.OnACKChanging(value);
					this.SendPropertyChanging();
					this._ACK = value;
					this.SendPropertyChanged("ACK");
					this.OnACKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offset", DbType="TinyInt")]
		public System.Nullable<byte> Offset
		{
			get
			{
				return this._Offset;
			}
			set
			{
				if ((this._Offset != value))
				{
					this.OnOffsetChanging(value);
					this.SendPropertyChanging();
					this._Offset = value;
					this.SendPropertyChanged("Offset");
					this.OnOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserved", DbType="TinyInt")]
		public System.Nullable<byte> Reserved
		{
			get
			{
				return this._Reserved;
			}
			set
			{
				if ((this._Reserved != value))
				{
					this.OnReservedChanging(value);
					this.SendPropertyChanging();
					this._Reserved = value;
					this.SendPropertyChanged("Reserved");
					this.OnReservedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="TinyInt")]
		public System.Nullable<byte> Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					if (this._Flag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Window", DbType="Int")]
		public System.Nullable<int> Window
		{
			get
			{
				return this._Window;
			}
			set
			{
				if ((this._Window != value))
				{
					this.OnWindowChanging(value);
					this.SendPropertyChanging();
					this._Window = value;
					this.SendPropertyChanged("Window");
					this.OnWindowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckSum", DbType="Int")]
		public System.Nullable<int> CheckSum
		{
			get
			{
				return this._CheckSum;
			}
			set
			{
				if ((this._CheckSum != value))
				{
					this.OnCheckSumChanging(value);
					this.SendPropertyChanging();
					this._CheckSum = value;
					this.SendPropertyChanged("CheckSum");
					this.OnCheckSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Urgent", DbType="Int")]
		public System.Nullable<int> Urgent
		{
			get
			{
				return this._Urgent;
			}
			set
			{
				if ((this._Urgent != value))
				{
					this.OnUrgentChanging(value);
					this.SendPropertyChanging();
					this._Urgent = value;
					this.SendPropertyChanged("Urgent");
					this.OnUrgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_TCPHeader", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.TCPHeaders.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.TCPHeaders.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flag_TCPHeader", Storage="_Flag", ThisKey="Flags", OtherKey="Number", IsForeignKey=true)]
		public Flag Flag
		{
			get
			{
				return this._Flag.Entity;
			}
			set
			{
				Flag previousValue = this._Flag.Entity;
				if (((previousValue != value) 
							|| (this._Flag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flag.Entity = null;
						previousValue.TCPHeaders.Remove(this);
					}
					this._Flag.Entity = value;
					if ((value != null))
					{
						value.TCPHeaders.Add(this);
						this._Flags = value.Number;
					}
					else
					{
						this._Flags = default(Nullable<byte>);
					}
					this.SendPropertyChanged("Flag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoLocation")]
	public partial class GeoLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _LocationId;
		
		private string _CountryCode;
		
		private string _RegionCode;
		
		private string _City;
		
		private string _PostalCode;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<int> _DmaCode;
		
		private System.Nullable<int> _AreaCode;
		
		private EntitySet<GeoIp> _GeoIps;
		
		private EntitySet<IPHeader> _IPHeaders;
		
		private EntitySet<IPHeader> _IPHeaders1;
		
		private EntityRef<CountryCode> _CountryCode1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnRegionCodeChanging(string value);
    partial void OnRegionCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnDmaCodeChanging(System.Nullable<int> value);
    partial void OnDmaCodeChanged();
    partial void OnAreaCodeChanging(System.Nullable<int> value);
    partial void OnAreaCodeChanged();
    #endregion
		
		public GeoLocation()
		{
			this._GeoIps = new EntitySet<GeoIp>(new Action<GeoIp>(this.attach_GeoIps), new Action<GeoIp>(this.detach_GeoIps));
			this._IPHeaders = new EntitySet<IPHeader>(new Action<IPHeader>(this.attach_IPHeaders), new Action<IPHeader>(this.detach_IPHeaders));
			this._IPHeaders1 = new EntitySet<IPHeader>(new Action<IPHeader>(this.attach_IPHeaders1), new Action<IPHeader>(this.detach_IPHeaders1));
			this._CountryCode1 = default(EntityRef<CountryCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._CountryCode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string RegionCode
		{
			get
			{
				return this._RegionCode;
			}
			set
			{
				if ((this._RegionCode != value))
				{
					this.OnRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionCode = value;
					this.SendPropertyChanged("RegionCode");
					this.OnRegionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DmaCode", DbType="Int")]
		public System.Nullable<int> DmaCode
		{
			get
			{
				return this._DmaCode;
			}
			set
			{
				if ((this._DmaCode != value))
				{
					this.OnDmaCodeChanging(value);
					this.SendPropertyChanging();
					this._DmaCode = value;
					this.SendPropertyChanged("DmaCode");
					this.OnDmaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Int")]
		public System.Nullable<int> AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_GeoIp", Storage="_GeoIps", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<GeoIp> GeoIps
		{
			get
			{
				return this._GeoIps;
			}
			set
			{
				this._GeoIps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_IPHeader", Storage="_IPHeaders", ThisKey="LocationId", OtherKey="IPDestinationLocationId")]
		public EntitySet<IPHeader> IPHeaders
		{
			get
			{
				return this._IPHeaders;
			}
			set
			{
				this._IPHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeoLocation_IPHeader1", Storage="_IPHeaders1", ThisKey="LocationId", OtherKey="IPSourceLocationId")]
		public EntitySet<IPHeader> IPHeaders1
		{
			get
			{
				return this._IPHeaders1;
			}
			set
			{
				this._IPHeaders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryCode_GeoLocation", Storage="_CountryCode1", ThisKey="CountryCode", OtherKey="ISO2", IsForeignKey=true)]
		public CountryCode CountryCode1
		{
			get
			{
				return this._CountryCode1.Entity;
			}
			set
			{
				CountryCode previousValue = this._CountryCode1.Entity;
				if (((previousValue != value) 
							|| (this._CountryCode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryCode1.Entity = null;
						previousValue.GeoLocations.Remove(this);
					}
					this._CountryCode1.Entity = value;
					if ((value != null))
					{
						value.GeoLocations.Add(this);
						this._CountryCode = value.ISO2;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("CountryCode1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeoIps(GeoIp entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = this;
		}
		
		private void detach_GeoIps(GeoIp entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = null;
		}
		
		private void attach_IPHeaders(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = this;
		}
		
		private void detach_IPHeaders(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = null;
		}
		
		private void attach_IPHeaders1(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation1 = this;
		}
		
		private void detach_IPHeaders1(IPHeader entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryCodes")]
	public partial class CountryCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ISO2;
		
		private string _ISO3;
		
		private string _Name;
		
		private string _PrintableName;
		
		private System.Nullable<int> _Code;
		
		private EntitySet<GeoLocation> _GeoLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnISO2Changing(string value);
    partial void OnISO2Changed();
    partial void OnISO3Changing(string value);
    partial void OnISO3Changed();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrintableNameChanging(string value);
    partial void OnPrintableNameChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    #endregion
		
		public CountryCode()
		{
			this._GeoLocations = new EntitySet<GeoLocation>(new Action<GeoLocation>(this.attach_GeoLocations), new Action<GeoLocation>(this.detach_GeoLocations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISO2", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ISO2
		{
			get
			{
				return this._ISO2;
			}
			set
			{
				if ((this._ISO2 != value))
				{
					this.OnISO2Changing(value);
					this.SendPropertyChanging();
					this._ISO2 = value;
					this.SendPropertyChanged("ISO2");
					this.OnISO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISO3", DbType="VarChar(3)")]
		public string ISO3
		{
			get
			{
				return this._ISO3;
			}
			set
			{
				if ((this._ISO3 != value))
				{
					this.OnISO3Changing(value);
					this.SendPropertyChanging();
					this._ISO3 = value;
					this.SendPropertyChanged("ISO3");
					this.OnISO3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintableName", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string PrintableName
		{
			get
			{
				return this._PrintableName;
			}
			set
			{
				if ((this._PrintableName != value))
				{
					this.OnPrintableNameChanging(value);
					this.SendPropertyChanging();
					this._PrintableName = value;
					this.SendPropertyChanged("PrintableName");
					this.OnPrintableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int")]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryCode_GeoLocation", Storage="_GeoLocations", ThisKey="ISO2", OtherKey="CountryCode")]
		public EntitySet<GeoLocation> GeoLocations
		{
			get
			{
				return this._GeoLocations;
			}
			set
			{
				this._GeoLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeoLocations(GeoLocation entity)
		{
			this.SendPropertyChanging();
			entity.CountryCode1 = this;
		}
		
		private void detach_GeoLocations(GeoLocation entity)
		{
			this.SendPropertyChanging();
			entity.CountryCode1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsByCountry")]
	public partial class EventsByCountry
	{
		
		private string _CountryCode;
		
		private string _CountryCode3;
		
		private System.Nullable<int> _CountryCount;
		
		public EventsByCountry()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this._CountryCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode3", DbType="VarChar(3)")]
		public string CountryCode3
		{
			get
			{
				return this._CountryCode3;
			}
			set
			{
				if ((this._CountryCode3 != value))
				{
					this._CountryCode3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCount", DbType="Int")]
		public System.Nullable<int> CountryCount
		{
			get
			{
				return this._CountryCount;
			}
			set
			{
				if ((this._CountryCount != value))
				{
					this._CountryCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsByIp")]
	public partial class EventsByIp
	{
		
		private string _Ip;
		
		private System.Nullable<int> _EventCount;
		
		public EventsByIp()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(45)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this._Ip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCount", DbType="Int")]
		public System.Nullable<int> EventCount
		{
			get
			{
				return this._EventCount;
			}
			set
			{
				if ((this._EventCount != value))
				{
					this._EventCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Search")]
	public partial class Search : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private System.Data.Linq.Binary _SourceIp;
		
		private System.Data.Linq.Binary _DestinationIp;
		
		private System.Nullable<decimal> _SignatureId;
		
		private System.Nullable<decimal> _SignatureClassificationId;
		
		private string _PacketType;
		
		private System.Nullable<int> _SourcePort;
		
		private System.Nullable<int> _DestinationPort;
		
		private System.Nullable<System.DateTime> _StartSearch;
		
		private System.Nullable<System.DateTime> _EndSearch;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Signature> _Signature;
		
		private EntityRef<SignatureClassification> _SignatureClassification;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnSourceIpChanging(System.Data.Linq.Binary value);
    partial void OnSourceIpChanged();
    partial void OnDestinationIpChanging(System.Data.Linq.Binary value);
    partial void OnDestinationIpChanged();
    partial void OnSignatureIdChanging(System.Nullable<decimal> value);
    partial void OnSignatureIdChanged();
    partial void OnSignatureClassificationIdChanging(System.Nullable<decimal> value);
    partial void OnSignatureClassificationIdChanged();
    partial void OnPacketTypeChanging(string value);
    partial void OnPacketTypeChanged();
    partial void OnSourcePortChanging(System.Nullable<int> value);
    partial void OnSourcePortChanged();
    partial void OnDestinationPortChanging(System.Nullable<int> value);
    partial void OnDestinationPortChanged();
    partial void OnStartSearchChanging(System.Nullable<System.DateTime> value);
    partial void OnStartSearchChanged();
    partial void OnEndSearchChanging(System.Nullable<System.DateTime> value);
    partial void OnEndSearchChanged();
    #endregion
		
		public Search()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Signature = default(EntityRef<Signature>);
			this._SignatureClassification = default(EntityRef<SignatureClassification>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceIp", DbType="VarBinary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SourceIp
		{
			get
			{
				return this._SourceIp;
			}
			set
			{
				if ((this._SourceIp != value))
				{
					this.OnSourceIpChanging(value);
					this.SendPropertyChanging();
					this._SourceIp = value;
					this.SendPropertyChanged("SourceIp");
					this.OnSourceIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationIp", DbType="VarBinary(16)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DestinationIp
		{
			get
			{
				return this._DestinationIp;
			}
			set
			{
				if ((this._DestinationIp != value))
				{
					this.OnDestinationIpChanging(value);
					this.SendPropertyChanging();
					this._DestinationIp = value;
					this.SendPropertyChanged("DestinationIp");
					this.OnDestinationIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureId", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> SignatureId
		{
			get
			{
				return this._SignatureId;
			}
			set
			{
				if ((this._SignatureId != value))
				{
					if (this._Signature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureIdChanging(value);
					this.SendPropertyChanging();
					this._SignatureId = value;
					this.SendPropertyChanged("SignatureId");
					this.OnSignatureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureClassificationId", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> SignatureClassificationId
		{
			get
			{
				return this._SignatureClassificationId;
			}
			set
			{
				if ((this._SignatureClassificationId != value))
				{
					if (this._SignatureClassification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignatureClassificationIdChanging(value);
					this.SendPropertyChanging();
					this._SignatureClassificationId = value;
					this.SendPropertyChanged("SignatureClassificationId");
					this.OnSignatureClassificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacketType", DbType="VarChar(4)")]
		public string PacketType
		{
			get
			{
				return this._PacketType;
			}
			set
			{
				if ((this._PacketType != value))
				{
					this.OnPacketTypeChanging(value);
					this.SendPropertyChanging();
					this._PacketType = value;
					this.SendPropertyChanged("PacketType");
					this.OnPacketTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePort", DbType="Int")]
		public System.Nullable<int> SourcePort
		{
			get
			{
				return this._SourcePort;
			}
			set
			{
				if ((this._SourcePort != value))
				{
					this.OnSourcePortChanging(value);
					this.SendPropertyChanging();
					this._SourcePort = value;
					this.SendPropertyChanged("SourcePort");
					this.OnSourcePortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationPort", DbType="Int")]
		public System.Nullable<int> DestinationPort
		{
			get
			{
				return this._DestinationPort;
			}
			set
			{
				if ((this._DestinationPort != value))
				{
					this.OnDestinationPortChanging(value);
					this.SendPropertyChanging();
					this._DestinationPort = value;
					this.SendPropertyChanged("DestinationPort");
					this.OnDestinationPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartSearch", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartSearch
		{
			get
			{
				return this._StartSearch;
			}
			set
			{
				if ((this._StartSearch != value))
				{
					this.OnStartSearchChanging(value);
					this.SendPropertyChanging();
					this._StartSearch = value;
					this.SendPropertyChanged("StartSearch");
					this.OnStartSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSearch", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndSearch
		{
			get
			{
				return this._EndSearch;
			}
			set
			{
				if ((this._EndSearch != value))
				{
					this.OnEndSearchChanging(value);
					this.SendPropertyChanging();
					this._EndSearch = value;
					this.SendPropertyChanged("EndSearch");
					this.OnEndSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Search_User", Storage="_Users", ThisKey="Id", OtherKey="ActiveSearch")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Signature_Search", Storage="_Signature", ThisKey="SignatureId", OtherKey="Id", IsForeignKey=true)]
		public Signature Signature
		{
			get
			{
				return this._Signature.Entity;
			}
			set
			{
				Signature previousValue = this._Signature.Entity;
				if (((previousValue != value) 
							|| (this._Signature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Signature.Entity = null;
						previousValue.Searches.Remove(this);
					}
					this._Signature.Entity = value;
					if ((value != null))
					{
						value.Searches.Add(this);
						this._SignatureId = value.Id;
					}
					else
					{
						this._SignatureId = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("Signature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignatureClassification_Search", Storage="_SignatureClassification", ThisKey="SignatureClassificationId", OtherKey="ClassificationId", IsForeignKey=true)]
		public SignatureClassification SignatureClassification
		{
			get
			{
				return this._SignatureClassification.Entity;
			}
			set
			{
				SignatureClassification previousValue = this._SignatureClassification.Entity;
				if (((previousValue != value) 
							|| (this._SignatureClassification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignatureClassification.Entity = null;
						previousValue.Searches.Remove(this);
					}
					this._SignatureClassification.Entity = value;
					if ((value != null))
					{
						value.Searches.Add(this);
						this._SignatureClassificationId = value.ClassificationId;
					}
					else
					{
						this._SignatureClassificationId = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("SignatureClassification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Search", Storage="_User", ThisKey="CreatedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Searches.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Searches.Add(this);
						this._CreatedBy = value.Id;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Search = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Search = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _Guid;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _Password;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _ActiveSearch;
		
		private EntitySet<Search> _Searches;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<UserUserGroup> _UserUserGroups;
		
		private EntitySet<EventComment> _EventComments;
		
		private EntityRef<Search> _Search;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGuidChanging(System.Guid value);
    partial void OnGuidChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnActiveSearchChanging(System.Nullable<int> value);
    partial void OnActiveSearchChanged();
    #endregion
		
		public User()
		{
			this._Searches = new EntitySet<Search>(new Action<Search>(this.attach_Searches), new Action<Search>(this.detach_Searches));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._UserUserGroups = new EntitySet<UserUserGroup>(new Action<UserUserGroup>(this.attach_UserUserGroups), new Action<UserUserGroup>(this.detach_UserUserGroups));
			this._EventComments = new EntitySet<EventComment>(new Action<EventComment>(this.attach_EventComments), new Action<EventComment>(this.detach_EventComments));
			this._Search = default(EntityRef<Search>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(512)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(512)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(512)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveSearch", DbType="Int")]
		public System.Nullable<int> ActiveSearch
		{
			get
			{
				return this._ActiveSearch;
			}
			set
			{
				if ((this._ActiveSearch != value))
				{
					if (this._Search.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActiveSearchChanging(value);
					this.SendPropertyChanging();
					this._ActiveSearch = value;
					this.SendPropertyChanged("ActiveSearch");
					this.OnActiveSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Search", Storage="_Searches", ThisKey="Id", OtherKey="CreatedBy")]
		public EntitySet<Search> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				this._Searches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserUserGroup", Storage="_UserUserGroups", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserUserGroup> UserUserGroups
		{
			get
			{
				return this._UserUserGroups;
			}
			set
			{
				this._UserUserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventComment", Storage="_EventComments", ThisKey="Id", OtherKey="CreatedBy")]
		public EntitySet<EventComment> EventComments
		{
			get
			{
				return this._EventComments;
			}
			set
			{
				this._EventComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Search_User", Storage="_Search", ThisKey="ActiveSearch", OtherKey="Id", IsForeignKey=true)]
		public Search Search
		{
			get
			{
				return this._Search.Entity;
			}
			set
			{
				Search previousValue = this._Search.Entity;
				if (((previousValue != value) 
							|| (this._Search.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Search.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Search.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ActiveSearch = value.Id;
					}
					else
					{
						this._ActiveSearch = default(Nullable<int>);
					}
					this.SendPropertyChanged("Search");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserUserGroups(UserUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserUserGroups(UserUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NLog")]
	public partial class NLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private string _LogLevel;
		
		private string _Logger;
		
		private string _Message;
		
		private string _MachineName;
		
		private string _UserName;
		
		private string _Method;
		
		private string _Thread;
		
		private string _Exception;
		
		private string _StackTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    partial void OnLogLevelChanging(string value);
    partial void OnLogLevelChanged();
    partial void OnLoggerChanging(string value);
    partial void OnLoggerChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnThreadChanging(string value);
    partial void OnThreadChanged();
    partial void OnExceptionChanging(string value);
    partial void OnExceptionChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    #endregion
		
		public NLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogLevel", DbType="VarChar(100)")]
		public string LogLevel
		{
			get
			{
				return this._LogLevel;
			}
			set
			{
				if ((this._LogLevel != value))
				{
					this.OnLogLevelChanging(value);
					this.SendPropertyChanging();
					this._LogLevel = value;
					this.SendPropertyChanged("LogLevel");
					this.OnLogLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logger", DbType="VarChar(8000)")]
		public string Logger
		{
			get
			{
				return this._Logger;
			}
			set
			{
				if ((this._Logger != value))
				{
					this.OnLoggerChanging(value);
					this.SendPropertyChanging();
					this._Logger = value;
					this.SendPropertyChanged("Logger");
					this.OnLoggerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(8000)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="VarChar(8000)")]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(8000)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="VarChar(8000)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="VarChar(100)")]
		public string Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exception", DbType="VarChar(8000)")]
		public string Exception
		{
			get
			{
				return this._Exception;
			}
			set
			{
				if ((this._Exception != value))
				{
					this.OnExceptionChanging(value);
					this.SendPropertyChanging();
					this._Exception = value;
					this.SendPropertyChanged("Exception");
					this.OnExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(8000)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UniqueDestinationPorts")]
	public partial class UniqueDestinationPort
	{
		
		private int _Port;
		
		private System.Nullable<int> _PortCount;
		
		public UniqueDestinationPort()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this._Port = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortCount", DbType="Int")]
		public System.Nullable<int> PortCount
		{
			get
			{
				return this._PortCount;
			}
			set
			{
				if ((this._PortCount != value))
				{
					this._PortCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UniqueSourcePorts")]
	public partial class UniqueSourcePort
	{
		
		private int _Port;
		
		private System.Nullable<int> _PortCount;
		
		public UniqueSourcePort()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this._Port = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortCount", DbType="Int")]
		public System.Nullable<int> PortCount
		{
			get
			{
				return this._PortCount;
			}
			set
			{
				if ((this._PortCount != value))
				{
					this._PortCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(512)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroups")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserUserGroup> _UserUserGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UserGroup()
		{
			this._UserUserGroups = new EntitySet<UserUserGroup>(new Action<UserUserGroup>(this.attach_UserUserGroups), new Action<UserUserGroup>(this.detach_UserUserGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(512)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_UserUserGroup", Storage="_UserUserGroups", ThisKey="Id", OtherKey="UserGroupId")]
		public EntitySet<UserUserGroup> UserUserGroups
		{
			get
			{
				return this._UserUserGroups;
			}
			set
			{
				this._UserUserGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserUserGroups(UserUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_UserUserGroups(UserUserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserUserGroups")]
	public partial class UserUserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _UserGroupId;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserGroupIdChanging(int value);
    partial void OnUserGroupIdChanged();
    #endregion
		
		public UserUserGroup()
		{
			this._User = default(EntityRef<User>);
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserGroupId
		{
			get
			{
				return this._UserGroupId;
			}
			set
			{
				if ((this._UserGroupId != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupId = value;
					this.SendPropertyChanged("UserGroupId");
					this.OnUserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserUserGroup", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserUserGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserUserGroups.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_UserUserGroup", Storage="_UserGroup", ThisKey="UserGroupId", OtherKey="Id", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.UserUserGroups.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.UserUserGroups.Add(this);
						this._UserGroupId = value.Id;
					}
					else
					{
						this._UserGroupId = default(int);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventComments")]
	public partial class EventComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _EventId;
		
		private decimal _SensorId;
		
		private string _Comment;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(decimal value);
    partial void OnEventIdChanged();
    partial void OnSensorIdChanging(decimal value);
    partial void OnSensorIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public EventComment()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Decimal(10,0) NOT NULL")]
		public decimal EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="Decimal(10,0) NOT NULL")]
		public decimal SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventComment", Storage="_Event", ThisKey="SensorId,EventId", OtherKey="SensorId,EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventComments.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventComments.Add(this);
						this._SensorId = value.SensorId;
						this._EventId = value.EventId;
					}
					else
					{
						this._SensorId = default(decimal);
						this._EventId = default(decimal);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventComment", Storage="_User", ThisKey="CreatedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventComments.Add(this);
						this._CreatedBy = value.Id;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
